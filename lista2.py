# -*- coding: utf-8 -*-
"""Lista2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tP7k1V75ik-7_rpbZDN05F5BI0HIfvhE

1. Crie uma classe chamada “Circulo” que tenha um atributo “raio”. Implemente um método chamado
“calcular_area” que retorna a área do círculo.
"""

class Circulo:

  def __init__(self, raio):
    self.raio = raio

  def calcular_area(self):
    self.area = 3.1415 * (self.raio ** 2)
    return self.area

teste = Circulo(6)
print(teste.calcular_area())

"""2. Crie uma classe chamada “Livro” que tenha atributos “titulo” e “autor”. Implemente um método
chamado “detalhes” que retorna uma string com as informações do livro.
"""

class Livro:

  def __init__(self, titulo, autor):
    self.titulo = titulo
    self.autor = autor

  def detalhes_(self):
    self.detalhes = "O poema O Corvo, de Edgar Allan Poe, conta a história de um homem que sofre a perda da sua amada e é visitado por um corvo falante"
    print(self.detalhes)


teste = Livro("O Corvo", "Edgar Allan Poe")
teste.detalhes_()

"""3. Crie uma classe chamada “Retangulo” que tenha atributos “base” e “altura”. Implemente um método
chamado “calcular_area” que retorna a área do retângulo.
"""

class Retangulo:

  def __init__(self, base, altura):
    self.base = base
    self.altura = altura

  def calcular_area(self):
    self.area = self.base * self.altura
    return self.area

teste = Retangulo(5, 10)
print(teste.calcular_area())

"""4. Crie uma classe chamada “ContaBancaria” que tenha atributos “saldo” e “titular”. Implemente
métodos “depositar” e “sacar” para manipular o saldo.
"""

class Conta_bancaria:

  def __init__(self, titular, saldo):
    self.titular = titular
    self.saldo = saldo

  def depositar(self):
    self.valor = float(input('Digite o valor a ser depositado: '))
    self.saldo += self.valor
    return self.saldo

  def sacar(self):
    while True:
      self.valor = float(input('Digite o valor a ser sacado: '))
      if self.valor > self.saldo:
        print('Valor inválido, digite um valor menor ou igual ao que você tem na conta.')
        self.valor = float(input('Digite o valor a ser sacado: '))
      else:
        break
    self.saldo = self.saldo - self.valor
    return self.saldo


teste = Conta_bancaria('João', 1000)
teste.depositar()
teste.sacar()
print(teste.saldo)

"""5. Crie uma classe chamada “Pessoa” com atributos “nome” e “idade”. Implemente um método
chamado “falar” que imprime uma mensagem com o nome da pessoa.
"""

class Pessoa:

  def __init__(self, nome, idade):
    self.nome = nome
    self.idade = idade

  def falar(self):
    print(f'Oi, eu sou o {self.nome}')

teste = Pessoa('João', 20)
teste.falar()

"""6. Crie uma classe chamada “Produto” com atributos “nome”, “preco” e “quantidade”. Implemente um
método chamado “calcular_total” que retorna o valor total do produto (preço * quantidade).
"""

class Produto:

  def __init__(self, nome, preço, quantidade):
    self.nome = nome
    self.preço = preço
    self.quantidade = quantidade

  def valor_total(self):
    self.valor = self.preço * self.quantidade
    return self.valor

teste = Produto('Caneta', 1.50, 10)
print(teste.valor_total())

"""7. Crie uma classe chamada “Carro” com atributos “marca”, “modelo” e “ano”. Implemente um método
chamado “detalhes” que retorna uma string com as informações do carro.
"""

class Carro:

  def __init__(self, marca, modelo, ano):
    self.marca = marca
    self.modelo = modelo
    self.ano = ano

  def detalhes(self):
    print(f'O carro é da marca {self.marca}, do modelo {self.modelo} e do ano {self.ano}')

teste = Carro('Toyota', 'Corolla', 2023)
teste.detalhes()

"""8. Crie uma classe chamada “Aluno” com atributos “nome” e “notas”. Implemente um método chamado
“calcular_media” que retorna a média das notas do aluno.
"""

class Aluno:

  def __init__(self, nome, nota1, nota2):
    self.nome = nome
    self.nota1 = nota1
    self.nota2 = nota2

  def calcular_media(self):
    self.media = (self.nota1 + self.nota2)/2
    return self.media

teste = Aluno('João', 10, 8)
print(teste.calcular_media())

"""9. Crie uma classe chamada “Triangulo” com atributos “lado1”, “lado2” e “lado3”. Implemente um
método chamado “calcular_perimetro” que retorna o perímetro do triângulo.
"""

class Triangulo:

  def __init__(self, lado1, lado2, lado3):
    self.lado1 = lado1
    self.lado2 = lado2
    self.lado3 = lado3

  def calcular_perimetro(self):
    self.perimetro = self.lado1 + self.lado2 + self.lado3
    return self.perimetro

teste = Triangulo(3, 4, 5)
print(teste.calcular_perimetro())

"""10. Crie uma classe chamada “Funcionario” com atributos “nome”, “salario” e “cargo”. Implemente um
método chamado “aumentar_salario” que recebe um valor percentual de aumento e atualiza o salário
do funcionário.
"""

class Funcionario:

  def __init__(self, nome, salario, cargo):
    self.nome = nome
    self.salario = salario
    self.cargo = cargo

  def aumentar_salario(self):
    self.aumento = float(input('Digite um valor para o percentual do aumento: '))
    self.salario = self.salario + (self.salario * self.aumento/100)
    return self.salario

teste = Funcionario('João', 1000, 'Analista')
print(teste.aumentar_salario())